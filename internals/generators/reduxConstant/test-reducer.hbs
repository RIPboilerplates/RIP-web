
  {{#if isAsync}}
  it('returns state for {{ constantCase actionName }}_PENDING', () => {
    setFetching()

    store = reducer(fromJS(initialState), { type: {{ constantCase actionName }}_PENDING })
    expect(store.toJS()).toEqual(result)
  })

  it('returns state for {{ constantCase actionName }}_FULFILLED', () => {
    setFetched()
    result.{{stateVariable}} = 'YAY!!'
    payload = 'YAY!!'

    store = reducer(fromJS(initialState), { type: {{ constantCase actionName }}_FULFILLED, payload })
    expect(store.toJS()).toEqual(result)
  })

  it('returns state for {{ constantCase actionName }}_REJECTED', () => {
    setFetched()
    result.error = error
    payload = error

    store = reducer(fromJS(initialState), { type: {{ constantCase actionName }}_REJECTED, payload })
    expect(store.toJS()).toEqual(result)
  })
  {{else}}
  it('returns state for {{ constantCase actionName }}', () => {
    result.{{stateVariable}} = 'YAY!!'
    payload = 'YAY!!'

    store = reducer(fromJS(initialState), { type: {{ constantCase actionName }}, payload })
    expect(store.toJS()).toEqual(result)
  })
  {{/if}}
})
