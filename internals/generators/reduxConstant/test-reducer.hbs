
  it('returns state for {{ constantCase actionName }}_PENDING', () => {
    setFetching()

    store = reducer(fromJS(initialState), { type: {{ constantCase actionName }}_PENDING })
    expect(store.toJS()).toEqual(result)
  })

  it('returns state for {{ constantCase actionName }}_FULFILLED', () => {
    setFetched()

    store = reducer(fromJS(initialState), { type: {{ constantCase actionName }}_FULFILLED })
    expect(store.toJS()).toEqual(result)
  })

  it('returns state for {{ constantCase actionName }}_REJECTED', () => {
    setFetched()
    payload = { error }

    store = reducer(fromJS(initialState), { type: {{ constantCase actionName }}_REJECTED, payload })
    expect(store.toJS()).toEqual(result)
  })
})
